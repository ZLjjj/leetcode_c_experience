在 C 语言中，声明 char s[5] = {'a', 'e', '4', '2', '6'}; 会在内存中为数组 s 分配 5 个字节，每个字节存储一个字符。以下是这段代码执行后的内存结构和对应的解读：
内存结构
地址 (假设从 0x100 开始)	内容 (十六进制表示)	字符
0x100	                     0x61	              'a'
0x101	                     0x65	              'e'
0x102	                     0x34	              '4'
0x103                    	 0x32	              '2'
0x104	                     0x36	              '6'

详细说明
数组存储规则:

数组 s 在内存中以连续的字节分配，每个字符占用 1 个字节。
数组的每个元素按声明顺序存储：'a', 'e', '4', '2', '6'。
字符与 ASCII 编码:

C 语言中，字符实际上是对应于 ASCII 表的整数值。例如：
'a' 的 ASCII 值是 97 (0x61)。
'e' 的 ASCII 值是 101 (0x65)。
'4' 的 ASCII 值是 52 (0x34)。
'2' 的 ASCII 值是 50 (0x32)。
'6' 的 ASCII 值是 54 (0x36)`。
内存地址:

每个字符按顺序存储在内存中相邻的地址，假设数组从 0x100 开始。
没有终止符:

这段代码没有显式添加 C 风格字符串的终止符 '\0'，因此它不是一个标准字符串，而仅是一个字符数组。

如果是 C 风格字符串
如果将数组定义为 char s[6] = {'a', 'e', '4', '2', '6', '\0'};，则内存结构如下：

地址 (假设从 0x100 开始)	内容 (十六进制表示)	字符
0x100	                    0x61	               'a'
0x101	                    0x65	               'e'
0x102	                    0x34	               '4'
0x103	                    0x32	               '2'
0x104	                    0x36	               '6'
0x105	                    0x00	               '\0'
此时，s 可以作为一个字符串使用，因为它以 '\0' 结尾，表示字符串的终止符。

注意事项
如果需要操作数组 s，要确保其内存边界不越界。
如果需要将数组 s 当作字符串（例如用于 printf("%s", s);），必须添加终止符 '\0'。否则可能导致未定义行为。

那如果我直接用strlen操作s结果会怎么样呢

如果直接对 char s[5] = {'a', 'e', '4', '2', '6'}; 调用 strlen(s)，结果是未定义行为，可能会导致错误的结果甚至程序崩溃。
